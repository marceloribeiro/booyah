#!/usr/bin/env python

import sys
import os
import subprocess
import argparse

BOOYAH_COMMAND_VERSION = '1.0.0'

def main():
    parser = argparse.ArgumentParser(description="Booyah console HELP - Commands list")
    parser.add_argument("--version", action="store_true", help="Show the version")
    subparsers = parser.add_subparsers(title="Commands", dest="command")

    generate_parser = subparsers.add_parser("generate", aliases=["g"], help="Generate controller with given name and actions")
    generate_parser.add_argument("generator", help="Name of the generator")
    generate_parser.add_argument("args", nargs="*", help="Generator args")

    new_parser = subparsers.add_parser("new", help="Create a new project with given name")
    new_parser.add_argument("project_name", help="The project name")

    s_parser = subparsers.add_parser("s", help="Starts the booyah server")
    c_parser = subparsers.add_parser("c", help="Starts the booyah console")
    v_parser = subparsers.add_parser("--version", help="Returns booyah version")

    args = parser.parse_args()
    if args.version:
        print(f"version {BOOYAH_COMMAND_VERSION}")  # Replace with your actual version number
        return
    if args.command == "generate" or args.command == "g":
        print("Generating files and code...")
        sys.path.append(src_path())
        from generators import generate
        generate.main(sys.argv[2:])
    elif args.command == "new":
        print("Creating a new project...")
        sys.path.append(src_path())
        from generators import generate_new
        generate_new.main(sys.argv[2:])
    elif args.command == "s":
        print("Starting server...")
        start_server()
    elif args.command == "c":
        print("Starting booyah console...")
        run_console()

def run_console():
    """
    Starts python console by running generators/console.py to configure it
    """
    require_under_virtual_env()
    python_command = f'PYTHONSTARTUP={src_path()}/generators/console.py python'
    subprocess.call(python_command, shell=True)

def src_path():
    """
    src_path point to internal booyah module (using this booyah file to find the path)
    not a current booyah project path src
    '"""
    script_path = os.path.realpath(sys.argv[0])
    script_directory = os.path.dirname(script_path)
    return os.path.realpath(script_directory + '/../src')

def require_under_virtual_env():
    """
    Verify if running this command under a virtual env
    """
    if "VIRTUAL_ENV" not in os.environ:
        print("Please run under a pyenv environment")
        print("i.e: pyenv activate booyah")
        sys.exit(1)

def start_server():
    """
    Check if pip installed and install requirements.txt
    enter the src dir of current folder
    start gunicorn application server
    """
    require_under_virtual_env()
    if subprocess.run(["command", "-v", "pip"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).returncode == 0:
        pip_command = "pip"
    else:
        pip_command = "pip3"
    os.chdir('src')
    subprocess.run([pip_command, "install", "-r", "requirements.txt"])
    subprocess.run(["gunicorn", "application"])
    os.chdir('..')

if __name__ == '__main__':
    main()